<?php


namespace backend\controllers;


use backend\models\Contacts;
use backend\models\OrdersContact;
use backend\models\OrdersContactSearch;
use backend\models\OrdersTopup;
use backend\models\OrdersTopupSearch;
use common\helper\Helper;
use Illuminate\Support\Arr;
use yii\helpers\ArrayHelper;
use yii\web\Response;

class AjaxReportController extends BaseController
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        \Yii::$app->response->format = Response::FORMAT_JSON;
    }

    public function actionFinancialTopup()
    {
        $searchModel = new OrdersTopupSearch();
        $dataProvider = $searchModel->search([
            'OrdersTopupSearch' => \Yii::$app->request->queryParams
        ]);
        $dataProvider->query->with(['partner', 'medias']);
        $data = $dataProvider->query->asArray()->all();

        $total = ArrayHelper::getColumn($data, 'total');
        $counter['total'] = 0;
        $counter['total_ship'] = 0;
        $counter['total_ship_crossed'] = 0;
        $counter['total_remaining'] = 0;
        return [
            'index' => $counter,
            'data' => $data
        ];
    }

    static function Crossed()
    {
        return [

        ];
    }

    static function Overview()
    {
        $query = Contacts::find()
            ->leftJoin('orders_contact', 'orders_contact.code = contacts.code')
            ->addSelect([
                'SUM(orders_contact.total_bill) as revenue_C8',
                'SUM(IF(orders_contact.payment_status = "paid", orders_contact.total_bill ,0)) as revenue_C11',
                'SUM(IF(orders_contact.payment_status = "crossed", orders_contact.total_bill ,0)) as revenue_C13',
                'FROM_UNIXTIME(contacts.updated_at, \'%d/%m/%Y\') day',
            ])->groupBy('day');

        $result = $query->asArray()->all();
        $result = array_map(function ($item) {
            return array_merge($item, [
                'C11_C8' => Helper::calculate($item['revenue_C11'], $item['revenue_C8']),
                'C13_C11' => Helper::calculate($item['revenue_C13'], $item['revenue_C11']),
            ]);
        }, $result);
        $labels = ArrayHelper::getColumn($result, 'day');
        $revenue_C8 = ArrayHelper::getColumn($result, 'revenue_C8');
        $revenue_C11 = ArrayHelper::getColumn($result, 'revenue_C11');
        $revenue_C13 = ArrayHelper::getColumn($result, 'revenue_C13');
        $C11_C8 = array_sum(ArrayHelper::getColumn($result, 'C11_C8'));
        $C13_C11 = array_sum(ArrayHelper::getColumn($result, 'C13_C11'));
        $total_revenue = array_sum(ArrayHelper::getColumn($result, 'revenue_C8'));

        return [
            'labels' => $labels,
            'data' => [
                'C8' => $revenue_C8,
                'C11' => $revenue_C11,
                'C13' => $revenue_C13
            ],
            'counter' => [
                'C11_C8' => $C11_C8,
                'C13_C11' => $C13_C11,
                'total_revenue' => $total_revenue
            ]
        ];
    }

    public function actionFinancial()
    {
        $task = \Yii::$app->request->post('task');
        switch ($task) {
            case 'crossed':
                return static::Crossed();
            default:
                return static::Overview();
        }

    }

    public function actionSales()
    {


        $query = Contacts::find()
            ->leftJoin('orders_contact', 'orders_contact.code = contacts.code')
            ->addSelect([
                'SUM(IF( contacts.status != "duplicate", 1, 0)) as C3',
                'SUM(IF( contacts.status = "ok", 1, 0 )) as C8',
                'SUM(IF( contacts.status = "cancel", 1, 0 )) as C6',
                'SUM(IF( contacts.status = "callback" OR contacts.status = "pending", 1, 0 )) as C7',
                'SUM(IF( contacts.status = "number_fail", 1, 0 )) as C4',
                'SUM(IF( contacts.status = "new", 1, 0 )) as C0',
                'SUM(orders_contact.total_bill) as revenueC8',
                'SUM(IF(orders_contact.payment_status = "paid",1,0)) as C11',
                'FROM_UNIXTIME(contacts.updated_at, \'%d/%m/%Y\') day',
            ])->groupBy('day');


        if (\Yii::$app->request->isPost) {
            $filter = \Yii::$app->request->post();
            $marketer = ArrayHelper::getValue($filter, 'marketer', []);
            $product = ArrayHelper::getValue($filter, 'product', []);
            $source = ArrayHelper::getValue($filter, 'source', []);
            $time_register = ArrayHelper::getValue($filter, 'time_register', '');
            if ($time_register) {
                $time_register = explode(' - ', $time_register);
                $startTime = Helper::timer($time_register[0]);
                $endTime = Helper::timer($time_register[1]);
                $query->where(['between', 'register_time', $startTime, $endTime]);
            } else {
                $query->where('register_time <= NOW() AND register_time >= DATE_SUB(register_time, INTERVAL 7 DAY)');
            }
            if ($source) {
                $query->filterWhere(['IN', 'type', $source]);
            }
            if ($product && !empty($product)) {
                $query->innerJoin('products', 'products.partner_name = contacts.partner');
                $query->filterWhere(['IN', 'sku', $product]);
            }
        }

        $result = $query->asArray()->all();
        $result = array_map(function ($item) {
            return array_merge($item, [
                'C8_C3' => Helper::calculate($item['C8'], $item['C3'])
            ]);
        }, $result);
        $labels = ArrayHelper::getColumn($result, 'day');
        $C8 = ArrayHelper::getColumn($result, 'C8');
        $C3 = ArrayHelper::getColumn($result, 'C3');
        $C4 = ArrayHelper::getColumn($result, 'C4');
        $C6 = ArrayHelper::getColumn($result, 'C6');
        $C7 = ArrayHelper::getColumn($result, 'C7');
        $C0 = ArrayHelper::getColumn($result, 'C0');
        $C11 = ArrayHelper::getColumn($result, 'C11');
        $C8_C3 = ArrayHelper::getColumn($result, 'C8_C3');
        $revenue_C8 = ArrayHelper::getColumn($result, 'revenueC8');
        $revenue_C8 = array_sum($revenue_C8);
        $totalC3 = array_sum($C3);
        $totalC8 = array_sum($C8);
        $totalC8_C3 = Helper::calculate($totalC8, $totalC3);
        $totalC11 = array_sum($C11);
        $totalC11_C3 = Helper::calculate($totalC11, $totalC3);
        $totalC11_C8 = Helper::calculate($totalC11, $totalC8);


        return [
            'labels' => $labels,
            'data' => [
                'C8' => $C8,
                'C3' => $C3,
                'C8_C3' => $C8_C3,
                'C4' => $C4,
                'C6' => $C6,
                'C7' => $C7,
                'C0' => $C0
            ],
            'counter' => [
                'revenue_C8' => $revenue_C8,
                'totalC8' => $totalC8,
                'totalC3' => $totalC3,
                'totalC8_C3' => $totalC8_C3,
                'totalC11' => $totalC11,
                'totalC11_C8' => $totalC11_C8,
                'totalC11_C3' => $totalC11_C3
            ]
        ];
    }

}