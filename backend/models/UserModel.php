<?php

namespace backend\models;

use common\models\BaseModel;
use common\models\User;
use yii\base\NotSupportedException;
use yii\helpers\ArrayHelper;
use yii\helpers\Html;
use yii\web\IdentityInterface;
use Yii;

class UserModel extends BaseModel implements IdentityInterface
{
    public $permission;
    const STATUS_DELETED = 0;
    const STATUS_INACTIVE = 9;
    const STATUS_ACTIVE = 10;
    const STATUS = [
        self::STATUS_ACTIVE => 'Hoạt động',
        self::STATUS_DELETED => 'Đã xóa',
        self::STATUS_INACTIVE => 'Chờ kích hoạt'
    ];
    public $role;
    /**
     * @var mixed|null
     */

    /**
     * @return string
     */
    public static function tableName()
    {
        return '{{%user}}'; // TODO: Change the autogenerated stub
    }

    /**
     * @return array|array[]
     */
    public function rules()
    {
        return [
            [['username', 'password_hash', 'role','permission'], 'required'],
            [['email', 'username'], 'unique'],
            [['email'], 'email'],
            [['permission'], 'safe'],
            [['password_hash', 'auth_key', 'email', 'password_reset_token', 'username', 'full_name', 'role', 'country'], 'string'],
            [['status', 'created_at', 'updated_at', 'phone_of_day'], 'integer'],
            ['status', 'default', 'value' => self::STATUS_ACTIVE],
            ['status', 'in', 'range' => [self::STATUS_ACTIVE, self::STATUS_INACTIVE, self::STATUS_DELETED]],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public static function findIdentity($id)
    {
        return static::findOne(['id' => $id, 'status' => self::STATUS_ACTIVE]);
    }

    /**
     * {@inheritdoc}
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        throw new NotSupportedException('"findIdentityByAccessToken" is not implemented.');
    }

    /**
     * Finds user by username
     *
     * @param string $username
     * @return static|null
     */
    public static function findByUsername($username)
    {
        return static::findOne(['username' => $username, 'status' => self::STATUS_ACTIVE]);
    }

    /**
     * Finds user by password reset token
     *
     * @param string $token password reset token
     * @return static|null
     */
    public static function findByPasswordResetToken($token)
    {
        if (!static::isPasswordResetTokenValid($token)) {
            return null;
        }

        return static::findOne([
            'password_reset_token' => $token,
            'status' => self::STATUS_ACTIVE,
        ]);
    }

    /**
     * Finds user by verification email token
     *
     * @param string $token verify email token
     * @return static|null
     */
    public static function findByVerificationToken($token)
    {
        return static::findOne([
            'verification_token' => $token,
            'status' => self::STATUS_INACTIVE
        ]);
    }

    /**
     * Finds out if password reset token is valid
     *
     * @param string $token password reset token
     * @return bool
     */
    public static function isPasswordResetTokenValid($token)
    {
        if (empty($token)) {
            return false;
        }

        $timestamp = (int)substr($token, strrpos($token, '_') + 1);
        $expire = Yii::$app->params['user.passwordResetTokenExpire'];
        return $timestamp + $expire >= time();
    }

    /**
     * {@inheritdoc}
     */
    public function getId()
    {
        return $this->getPrimaryKey();
    }

    /**
     * {@inheritdoc}
     */
    public function getAuthKey()
    {
        return $this->auth_key;
    }

    /**
     * {@inheritdoc}
     */
    public function validateAuthKey($authKey)
    {
        return $this->getAuthKey() === $authKey;
    }

    public function validateCountry($country)
    {
        if ($this->position->item_name === UserRole::ROLE_SALE) {
            return $country === $this->country;
        }
        return true;
    }

    /**
     * Validates password
     *
     * @param string $password password to validate
     * @return bool if password provided is valid for current user
     */
    public function validatePassword($password)
    {
        return Yii::$app->security->validatePassword($password, $this->password_hash);
    }

    /**
     * Generates password hash from password and sets it to the model
     *
     * @param string $password
     */
    public function setPassword($password)
    {
        $this->password_hash = Yii::$app->security->generatePasswordHash($password);
    }

    public function generateAuthKey()
    {
        $this->auth_key = Yii::$app->security->generateRandomString();
    }

    /**
     * Generates new password reset token
     */
    public function generatePasswordResetToken()
    {
        $this->password_reset_token = Yii::$app->security->generateRandomString() . '_' . time();
    }

    /**
     * Generates new token for email verification
     */
    public function generateEmailVerificationToken()
    {
        $this->verification_token = Yii::$app->security->generateRandomString() . '_' . time();
    }

    /**
     * Removes password reset token
     */
    public function removePasswordResetToken()
    {
        $this->password_reset_token = null;
    }

    public function beforeSave($insert)
    {
        if ($insert) {
            $this->generateAuthKey();
            $this->setPassword($this->password_hash);

            if ($this->role === UserRole::ROLE_SALE) {
                $this->checkEmptyColumn($this->phone_of_day);
                $this->checkEmptyColumn($this->country);
            }
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function checkEmptyColumn($column, $message = '')
    {
        if (!$column) {
            $this->addError($column, $this->getAttributeLabel($message) . " bắt buộc!");
            return false;
        }
        return true;
    }

    static function userStatusLabel($status)
    {
        switch ($status) {
            case self::STATUS_INACTIVE:
                $color = 'secondary';
                break;
            case self::STATUS_ACTIVE:
                $color = 'success';
                break;
            default:
                $color = 'danger';
        }
        return Html::tag('span', ArrayHelper::getValue(self::STATUS, $status), [
            'class' => "badge badge-pill m-auto badge-$color"
        ]);
    }

    public function getPosition()
    {
        return $this->hasOne(AuthAssignment::className(), ['user_id' => 'id']);
    }

    public function afterFind()
    {
        $this->role = $this->position->item_name;
        parent::afterFind(); // TODO: Change the autogenerated stub
    }

    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'username' => 'Tên đăng nhập',
            'password_hash' => 'Mật khẩu',
            'email' => 'Email',
            'role' => 'Vai trò',
            'status' => 'Trạng thái',
            'created_at' => 'Ngày tạo',
            'updated_at' => 'Ngày cập nhật'
        ]; // TODO: Change the autogenerated stub
    }

}