<?php

namespace console\controllers;

use backend\models\Contacts;
use backend\models\ContactsSheet;
use backend\models\OrdersContact;
use backend\models\ZipcodeCountry;
use common\helper\Helper;
use common\helper\SheetApi;
use yii\data\ActiveDataProvider;
use yii\db\Expression;
use yii\helpers\ArrayHelper;
use yii\web\BadRequestHttpException;
use yii2tech\spreadsheet\Spreadsheet;

class AutoController extends \yii\console\Controller
{
    public function init()
    {
        $countries = ZipcodeCountry::find()->addSelect(['name', 'code', 'symbol'])->groupBy('code')->all();
        $countriesParams = ArrayHelper::map($countries, 'code', function ($item) {
            return $item->code . '-' . $item->name;
        });
        $symbols = ArrayHelper::map($countries, 'code', 'symbol');
        \Yii::$app->params['countries'] = $countriesParams;
        \Yii::$app->params['symbols'] = $symbols;
        \Yii::$app->language = \Yii::$app->cache->get('language');
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @return bool
     * @throws BadRequestHttpException
     */
    public function actionIndex()
    {
        $api = new SheetApi();
        $model = ContactsSheet::find()->all();
        if (!$model) {
            throw new BadRequestHttpException(Helper::firstError($model));
        }

        foreach ($model as $partner) {
            $sheetId = $partner->sheet_id;

            $sheet = new \Google_Service_Sheets($api->client);
            $range = "{$partner->category->name}!A1:I";
            echo $range . "\n";
            $response = $sheet->spreadsheets_values->get($sheetId, $range);
            $values = $response->getValues();
            unset($values[0]);
            if (empty($values)) {
                continue;
            };

            foreach ($values as $item) {
                try {
                    $model = new Contacts();
                    $data = [
                        'register_time' => Helper::timer(str_replace("/", "-", $item[0])),
                        'name' => $item[1],
                        'phone' => $item[2],
                        'address' => isset($item[3]) ? $item[3] : null,
                        'zipcode' => isset($item[4]) ? $item[4] : null,
                        'option' => isset($item[5]) ? $item[5] : null,
                        'note' => isset($item[6]) ? $item[6] : null,
                        'country' => $partner->country,
                        'category' => $partner->category->name,
                        'partner' => $partner->partner->username,
                        'type' => isset($item[8]) ? $item[8] : null,
                    ];
                    if ($partner->contact_source === ContactsSheet::SOURCE_REQUIRED && Helper::isEmpty($data['type'])) {
                        printf("Nguồn liên hệ bắt buộc");
                    } else {
                        $model->load($data, "");
                        if (!$model->save()) {
                            printf("success\n");
                        }
                    }
                } catch (\Exception $exception) {
                    printf($exception->getMessage() . "\n");
                }
            }
        }
        echo "done";
    }

    public function actionCallbackToCancel()
    {
        try {
            $timer = Helper::setting('callback_to_cancel_time');
            if (!$timer) {
                throw new BadRequestHttpException("Not set timer!");
            }
//            $contacts = Contacts::find()->where(['contacts.status' => Contacts::STATUS_CALLBACK])
//                ->andWhere(["FROM_UNIXTIME(contacts.register_time) >= NOW() - INTERVAL $timer DAY"])
//                ->all();
//            if (!$contacts) {
//                throw new BadRequestHttpException("Not found any contact!");
//            }
            Contacts::updateAll(['contacts.status' => Contacts::STATUS_CANCEL], [
                'AND',
                ['contacts.status' => Contacts::STATUS_CALLBACK],
                [">=", "FROM_UNIXTIME(contacts.register_time)", new Expression("NOW() - INTERVAL $timer DAY")]
            ]);
        } catch (\Exception $exception) {
            printf($exception->getMessage());
        }
        printf("done");
    }

    public function actionTest()
    {
        echo "HELLO";
    }

    public function actionExportOrder()
    {

        $query = OrdersContact::find()
            ->with(['skuItems', 'warehouse', 'transporter', 'payment'])
            ->where(['status' => OrdersContact::STATUS_PENDING]);
        $exporter = new Spreadsheet([
            'dataProvider' => new ActiveDataProvider([
                'query' => $query,
            ]),
            'columns' => [
                'code',
                'name',
                'phone',
                'address',
                [
                    'attribute' => 'code',
                    'value' => function ($model) {
                        return $model->code;
                    }
                ],
                [
                    'attribute' => 'time_shipped_success',
                    'value' => function ($model) {
                        return Helper::dateFormat($model->time_shipped_success);
                    }
                ],
                [
                    'attribute' => 'warehouse_id',
                    'value' => function ($model) {
                        $warehouse = Helper::isEmpty($model->warehouse) ? null : $model->warehouse->name;
                        return $warehouse;
                    }
                ],
                [
                    'attribute' => 'transport_id',
                    'value' => function ($model) {
                        $transport = Helper::isEmpty($model->transporter) ? null : $model->transporter->name;
                        return $transport;
                    }
                ],
                [
                    'label' => 'Delivery count',
                    'value' => function ($model) {
                        return 1;
                    }
                ],
                [
                    'label' => 'Total Product',
                    'format' => 'html',
                    'value' => function ($model) {
                        return Helper::printString($model, true);
                    }
                ],
                [
                    'label' => 'Số lượng SP',
                    'value' => function ($model) {
                        $qty = 0;
                        $items = Helper::isEmpty($model->skuItems) ? [] : $model->skuItems;
                        if (!empty($items)) {
                            foreach ($items as $item) {
                                $qty += (int)$item->qty;
                            }
                        }
                        return $qty;
                    }
                ],
                [
                    'label' => 'Đối tác',
                    'value' => function ($model) {
                        $partner = !Helper::isEmpty($model->partner_name) ? $model->partner_name : null;
                        if (!$partner) {
                            $contact = !Helper::isEmpty($model->contact) ? $model->contact->partnerName : null;
                            if ($contact) {
                                return $contact->username;
                            }
                        }
                        return $partner;
                    }
                ],
                [
                    'label' => 'Item SKU',
                    'value' => function ($model) {
                        $sku = '';
                        $items = Helper::isEmpty($model->skuItems) ? [] : $model->skuItems;
                        if (!empty($items)) {
                            foreach ($items as $item) {
                                $sku .= $item->sku;
                            }
                        }
                        return $sku;
                    }
                ],
                [
                    'label' => 'Item Quantity',
                    'value' => function ($model) {
                        $qty = '';
                        $items = Helper::isEmpty($model->skuItems) ? [] : $model->skuItems;
                        if (!empty($items)) {
                            foreach ($items as $item) {
                                $qty .= $item->qty . ',';
                            }
                        }
                        return substr($qty, 0, -1);
                    }
                ],

                [
                    'label' => 'Kích thước (Volume)',
                    'value' => function ($model) {
                        $qty = '';
                        $items = Helper::isEmpty($model->skuItems) ? [] : $model->skuItems;
                        if (!empty($items)) {
                            foreach ($items as $item) {
                                if (!$item->product) {
                                    continue;
                                }
                                $qty .= $item->product->size . ',';
                            }
                        }
                        return substr($qty, 0, -1);
                    }
                ],
                [
                    'label' => 'Khối lượng (Gram)',
                    'value' => function ($model) {
                        $qty = '';
                        $items = Helper::isEmpty($model->skuItems) ? [] : $model->skuItems;
                        if (!empty($items)) {
                            foreach ($items as $item) {
                                if (!$item->product) {
                                    continue;
                                }
                                $qty .= $item->product->weight . ',';
                            }
                        }
                        return substr($qty, 0, -1);
                    }
                ],
                [
                    'label' => 'Phương thức thanh toán',
                    'value' => function ($model) {
                        $payment = Helper::isEmpty($model->payment) ? null : $model->payment->name;
                        return $payment;
                    }
                ],
                [
                    'label' => 'Link ảnh hóa đơn',
                    'value' => function ($model) {
                        return $model->bill_link;
                    }
                ],
                [
                    'label' => 'Doanh thu có ship (C8)',
                    'value' => function ($model) {
                        return Helper::toFloat($model->total_bill);
                    }
                ],
                'zipcode',
                [
                    'label' => 'Vùng',
                    'value' => function ($model) {
                        return Helper::countryName($model->country);
                    }
                ],

            ]
        ]);
        $file = UPLOAD_PATH . '/order_' . time() . '.xlsx';
        $exporter->save($file);

        echo "\nDONE";
    }
}
